#include "base64.hh"

#include <cstring>

constexpr char base64_encode_table[] =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
constexpr uint8_t base64_decode_table[128] = {
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x3E, 0xFF, 0xFF, 0xFF, 0x3F,
  0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
  0x3C, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
  0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
  0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
  0x17, 0x18, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
  0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
  0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
  0x31, 0x32, 0x33, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

namespace {
unsigned div_ceil(unsigned a, unsigned b) noexcept {
  return a/b + (a%b != 0);
}
constexpr uint8_t operator""_u1(unsigned long long int x) noexcept {
  return x;
}
}

std::string base64_encode(const char* ptr, size_t len) noexcept {
  unsigned npad = len%3;
  if (npad) npad = 3 - npad;
  std::string out(div_ceil(len*8,6)+npad,'=');
  char* o = out.data();
  uint8_t d=0, step=0, mask=0, byte;
  for (const char* const end = ptr+len; ptr!=end; ++ptr) {
    byte = *ptr;
    (mask >>= 2_u1) |= (3_u1<<4_u1);
    step += 2_u1;
    d |= (byte >> step);
    *(o++) = base64_encode_table[d];
    d = (byte << (6_u1-step)) & mask;
    if (step==6_u1) {
      *(o++) = base64_encode_table[d];
      step = 0_u1;
      mask = 0_u1;
      d = 0_u1;
    }
  }
  if (step) *(o++) = base64_encode_table[d];
  return out;
}

std::vector<char> base64_decode(const char* ptr, size_t len) noexcept {
  len *= 6;
  std::vector<char> out(len/8 + !!(len%8));
  char* o = out.data();
  uint8_t c, d, step = 0;
  char byte;
  for (const char* const end = ptr+len; ptr!=end; ++ptr) {
    if ((c=*ptr)>>7 || (d=base64_decode_table[c])==0xFF) break;
    step += 2;
    if (step>2) {
      byte |= (d >> (8-step));
      *(o++) = byte;
    }
    if (step<8) byte = (d << step);
    else step = 0;
  }
  if (step) *(o++) = byte;
  return out;
}

